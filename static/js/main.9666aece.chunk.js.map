{"version":3,"sources":["Todo.js","TodoList.js","TodoForm.js","GetData.js","App.js","index.js"],"names":["Todo","props","className","type","name","onChange","id","checked","status","text","onClick","handleEdit","handleDestroy","TodoList","todoComponents","items","map","item","key","handlechange","TodoForm","value","placeholder","handleChange","formButtonClick","isEdit","style","display","baseUrl","myRequest","Request","myHeaders","Headers","myInit","method","headers","append","update","todo","data","records","fields","body","JSON","stringify","fetch","then","response","json","App","useState","isLoading","setIsLoading","todoData","setTodoData","setText","setIsEdit","currentEdit","setCurrentEdit","useEffect","prevState","newTodo","updatedTodo","filter","console","log","destroy","e","updatedT","target","preventDefault","innerHTML","create","prevTodoData","newTodoData","push","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.9666aece.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Todo(props){\r\n    return(\r\n            <li className=\"list-group-item\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    name=\"status\"\r\n                    onChange={() => props.onChange(props.id)}\r\n                    checked={props.status}\r\n                    />\r\n               <p className={props.status ? \"complete\" : null}>{props.text}</p>\r\n               <div className=\"button-group\">\r\n                    <button onClick={() => props.handleEdit(props.id)}>Edit</button>\r\n                    <button onClick={() => props.handleDestroy(props.id)}>Delete</button>\r\n\r\n               </div>\r\n            </li>\r\n \r\n    )\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList(props){\r\n    const todoComponents = props.items.map( item => {\r\n        return <Todo \r\n                    key={item.id} \r\n                    id={item.id} \r\n                    text={item.text} \r\n                    status={item.status} \r\n                    handleEdit={props.handleEdit} \r\n                    onChange={props.handlechange} \r\n                    handleDestroy={props.handleDestroy}\r\n\r\n                /> \r\n    })\r\n    return(\r\n        <div>\r\n            <ul className=\"list-group\">\r\n                    {todoComponents}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default TodoList;","import React from 'react';\r\n\r\nfunction TodoForm(props){\r\n    return(\r\n        <div >\r\n            <form className=\"todo-form\">\r\n                <textarea \r\n                    type=\"text\"\r\n                    name=\"text\"\r\n                    value={props.text}\r\n                    placeholder=\"Add Text Here\"\r\n                    onChange={props.handleChange}\r\n\r\n                />\r\n                <div className=\"button-group\">\r\n                    <button onClick={props.formButtonClick}>{props.isEdit ? \"Update\" : \"Add\" }</button>\r\n                    <button style={props.isEdit ? null : {display: 'none'}} onClick={props.formButtonClick}>Cancel</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm","const baseUrl = \"https://api.airtable.com/v0/appSlGM6UHvPEi9Mj/Todos\"\r\nconst myRequest = new Request(baseUrl);\r\nconst myHeaders = new Headers();\r\nlet myInit = {\r\n    method: 'GET',\r\n    headers: myHeaders\r\n};\r\nmyHeaders.append('Authorization', 'Bearer keyqL6Ke0FIAQtmOQ');\r\nmyHeaders.append('Content-Type', 'application/json');\r\n\r\nexport const get = () => {\r\n    return fetch(myRequest, myInit)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const formatData = data.records.map(data => {\r\n                return {\r\n                    id: data.id,\r\n                    text: data.fields.text,\r\n                    status: data.fields.status ? data.fields.status : false\r\n                }\r\n            })\r\n            return formatData\r\n        })\r\n}\r\n\r\nexport const update = (todo) => {\r\n    myInit.method = \"PATCH\"\r\n    let data = {\r\n        records: [{\r\n                id: todo.id,\r\n                fields: {\r\n                    text: todo.text,\r\n                    status: todo.status\r\n                }\r\n            }\r\n\r\n        ]\r\n    }\r\n    myInit.body = JSON.stringify(data)\r\n    return fetch(myRequest, myInit)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            return data\r\n        })\r\n}\r\n\r\nexport const create = (todo) => {\r\n    myInit.method = \"POST\"\r\n    let data = {\r\n        records: [{\r\n            fields: {\r\n                text: todo.text,\r\n                status: todo.status\r\n            }\r\n        }]\r\n    }\r\n    myInit.body = JSON.stringify(data)\r\n    return fetch(myRequest, myInit)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            const formatData = data.records.map(data => {\r\n                return {\r\n                    id: data.id,\r\n                    text: data.fields.text,\r\n                    status: data.fields.status ? data.fields.status : false\r\n                }\r\n            })\r\n            return formatData[0]\r\n        })\r\n}\r\n\r\nexport const destroy = (id) => {\r\n    myInit.method = \"DELETE\"\r\n    fetch(baseUrl+\"/\"+id, myInit)\r\n    .then(response => response.json())\r\n    .then(data => {\r\n        console.log(data)\r\n    })\r\n}","import React, {useState, useEffect} from 'react';\r\nimport TodoList from './TodoList';\r\nimport TodoForm from './TodoForm';\r\nimport {get, update, create, destroy} from './GetData'\r\n\r\nfunction App(){\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n    const [ todoData, setTodoData ] = useState([])\r\n    const [ text, setText ] = useState(\"\")\r\n    // const [ status, setStatus ] = useState(false)\r\n    const [ isEdit, setIsEdit] = useState(false)\r\n    const [ currentEdit, setCurrentEdit ] = useState({})\r\n\r\n    useEffect( () => {\r\n        get()\r\n        .then(data => {\r\n            setIsLoading(false)\r\n            setTodoData(data)\r\n        })\r\n    },[])\r\n    \r\n    function handlechange (id){\r\n        setTodoData( prevState => {\r\n            const updatedTodo = prevState.map(todo => {\r\n                if (todo.id === id){\r\n                    let newTodo = {\r\n                        ...todo,\r\n                        status: !todo.status\r\n                    }\r\n                    update(newTodo)\r\n                    return newTodo\r\n                }\r\n                return todo\r\n            })\r\n            return updatedTodo\r\n        })\r\n    }\r\n\r\n    function formButtonClick(e){\r\n        e.preventDefault()\r\n        if (e.target.innerHTML === 'Add'){\r\n            let todo = {\r\n                text: text,\r\n                status: false\r\n            }\r\n             create(todo)\r\n            .then(data => {\r\n                setTodoData( prevTodoData => {\r\n                    const newTodoData = [...prevTodoData]\r\n                    newTodoData.push(data)\r\n                    return newTodoData\r\n                })\r\n                setText(\"\")\r\n                // setStatus(false)\r\n            })\r\n        }else if(e.target.innerHTML === 'Update'){\r\n            setTodoData( prevState => {\r\n                const updatedTodo = prevState.map(todo => {\r\n                    if (todo.id === currentEdit.id){\r\n                        let newTodo = {\r\n                            id: currentEdit.id,\r\n                            text: text,\r\n                            status: currentEdit.status\r\n                        }\r\n                        update(newTodo)\r\n                        return newTodo\r\n                    }\r\n                    return todo\r\n                })\r\n                return updatedTodo\r\n            })\r\n            setIsEdit(false)\r\n            setText(\"\")\r\n            setCurrentEdit({})         \r\n        }else if(e.target.innerHTML === 'Cancel'){\r\n            console.log(e.target.innerHTML)\r\n            setIsEdit(false)\r\n            setText(\"\")\r\n            setCurrentEdit({})\r\n        }else{\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    function formHandleChange (e){\r\n        let updatedT = e.target.value\r\n        setText(updatedT)\r\n    }\r\n\r\n    function handleDestroy(id){\r\n        setTodoData( prevState => {\r\n            const updatedTodo = prevState.filter(todo => {\r\n                return todo.id !== id\r\n            })\r\n            destroy(id)\r\n            console.log(updatedTodo)\r\n            return updatedTodo\r\n        })\r\n    }\r\n\r\n    function handleEdit(id){\r\n        setIsEdit(true)\r\n        for (const todo of todoData) {\r\n            if (todo.id === id ) {\r\n                setCurrentEdit(todo)\r\n                setText(todo.text)\r\n            };\r\n          }\r\n    }\r\n    return(\r\n        \r\n                    <div className=\"todo-list\">\r\n                        { isLoading ? \r\n                        <div>Loading.....</div> \r\n                        : <>\r\n                        <h3>Todo List</h3>\r\n                        <TodoList items={todoData} handlechange={handlechange} handleDestroy={handleDestroy} handleEdit={handleEdit}/>\r\n                        <TodoForm text={text} isEdit={isEdit} handleChange={formHandleChange} formButtonClick={formButtonClick}/>\r\n                        </>}\r\n                        \r\n                    </div>\r\n         \r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport App from './App'\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './custom.css'\r\n\r\nReactDom.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}